# 创建namespace
apiVersion: v1
kind: Namespace
metadata:
  name: kubestar-monitor
---
# netdata 在 kubernetes 中需要的权限配置
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: netdata
  name: netdata
  namespace: kubestar-monitor
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: netdata
  name: kubestar-netdata
rules:
- apiGroups:
  - ""
  resources:
  - services
  - events
  - endpoints
  - pods
  - nodes
  - componentstatuses
  - nodes/proxy
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - resourcequotas
  verbs:
  - get
  - list
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- nonResourceURLs:
  - /version
  - /healthz
  - /metrics
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - nodes/metrics
  - nodes/spec
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: netdata
  name: kubestar-netdata
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubestar-netdata
subjects:
- kind: ServiceAccount
  name: netdata
  namespace: kubestar-monitor
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: netdata
  name: kubestar-netdata-psp
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubestar-netdata-psp
subjects:
- kind: ServiceAccount
  name: netdata
  namespace: kubestar-monitor
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: netdata
  name: kubestar-netdata-psp
rules:
- apiGroups:
  - policy
  resourceNames:
  - kubestar-netdata-psp
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
# netdata master 发布
apiVersion: v1
data:
  health: |
    SEND_EMAIL="NO"
    SEND_SLACK="NO"
    SLACK_WEBHOOK_URL=""
    DEFAULT_RECIPIENT_SLACK=""
    role_recipients_slack[sysadmin]="${DEFAULT_RECIPIENT_SLACK}"
    role_recipients_slack[domainadmin]="${DEFAULT_RECIPIENT_SLACK}"
    role_recipients_slack[dba]="${DEFAULT_RECIPIENT_SLACK}"
    role_recipients_slack[webmaster]="${DEFAULT_RECIPIENT_SLACK}"
    role_recipients_slack[proxyadmin]="${DEFAULT_RECIPIENT_SLACK}"
    role_recipients_slack[sitemgr]="${DEFAULT_RECIPIENT_SLACK}"
  netdata: |
    [global]
      memory mode = save
      bind to = 0.0.0.0:19999
    [plugins]
      cgroups = no
      tc = no
      enable running new plugins = no
      check for new plugins every = 72000
      python.d = no
      charts.d = no
      go.d = no
      node.d = no
      apps = no
      proc = no
      idlejitter = no
      diskspace = no
  stream: |
    [11111111-2222-3333-4444-555555555555]
      enabled = yes
      history = 3600
      default memory mode = save
      health enabled by default = auto
      allow from = *
kind: ConfigMap
metadata:
  labels:
    app: netdata
  name: netdata-conf-master
  namespace: kubestar-monitor
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: netdata
    role: master
  name: netdata-master
  namespace: kubestar-monitor
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: netdata
      role: master
  serviceName: netdata
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: netdata
        role: master
    spec:
      containers:
      - env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: netdata/netdata:v1.21.0
        imagePullPolicy: Always
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - killall netdata; while killall -0 netdata; do sleep 1; done
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/v1/info
            port: http
            scheme: HTTP
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
        name: netdata
        ports:
        - containerPort: 19999
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/v1/info
            port: http
            scheme: HTTP
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: "500m"
            memory: 1G
          requests:
            cpu: "500m"
            memory: 1G
        volumeMounts:
        - mountPath: /etc/netdata/health_alarm_notify.conf
          name: config
          subPath: health
        - mountPath: /etc/netdata/netdata.conf
          name: config
          subPath: netdata
        - mountPath: /etc/netdata/stream.conf
          name: config
          subPath: stream
        # - mountPath: /var/cache/netdata
        #   name: database
        # - mountPath: /var/lib/netdata
        #   name: alarms
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      securityContext:
        fsGroup: 201
      serviceAccount: netdata
      serviceAccountName: netdata
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: netdata-conf-master
        name: config
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  # volumeClaimTemplates:
  # - metadata:
  #     creationTimestamp: null
  #     name: database
  #   spec:
  #     accessModes:
  #     - ReadWriteOnce
  #     resources:
  #       requests:
  #         storage: 2Gi
  #     volumeMode: Filesystem
  # - metadata:
  #     creationTimestamp: null
  #     name: alarms
  #   spec:
  #     accessModes:
  #     - ReadWriteOnce
  #     resources:
  #       requests:
  #         storage: 100Mi
  #     volumeMode: Filesystem
---
# netdata Service 发布
apiVersion: v1
kind: Service
metadata:
  labels:
    app: netdata
    role: master
  name: netdata
  namespace: kubestar-monitor
spec:
  ports:
  - name: http
    port: 19999
    protocol: TCP
    targetPort: 19999
  selector:
    app: netdata
    role: master
  sessionAffinity: None
  type: LoadBalancer 
---
# netdata slave 配置文件
apiVersion: v1
data:
  coredns: |
    update_every: 1
    autodetection_retry: 0
    jobs:
      - url: http://127.0.0.1:9153/metrics
      - url: http://kube-dns.kube-system.svc.cluster.local:9153/metrics
  kubelet: |
    update_every: 1
    autodetection_retry: 0
    jobs:
      - url: http://127.0.0.1:10255/metrics
      - url: https://localhost:10250/metrics
        tls_skip_verify: yes
  kubeproxy: |
    update_every: 1
    autodetection_retry: 0
    jobs:
      - url: http://127.0.0.1:10249/metrics
  netdata: |
    [global]
      # memory mode = none
    [health]
      # enabled = no
  stream: |
    [stream]
      enabled = yes
      destination = netdata:19999
      api key = 11111111-2222-3333-4444-555555555555
      timeout seconds = 60
      buffer size bytes = 1048576
      reconnect delay seconds = 5
      initial clock resync iterations = 60
kind: ConfigMap
metadata:
  labels:
    app: netdata-conf-slave
  name: netdata-conf-slave
  namespace: kubestar-monitor
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  labels:
    app: netdata
    role: slave
  name: netdata-slave
  namespace: kubestar-monitor
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: netdata
      role: slave
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: netdata
        role: slave
    spec:
      containers:
      - env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: MY_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: netdata/netdata:v1.21.0
        imagePullPolicy: Always
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - killall netdata; while killall -0 netdata; do sleep 1; done
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/v1/info
            port: http
            scheme: HTTP
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
        name: netdata
        ports:
        - containerPort: 19999
          hostPort: 19999
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/v1/info
            port: http
            scheme: HTTP
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: "500m"
            memory: 1G
          requests:
            cpu: "500m"
            memory: 1G
        securityContext:
          capabilities:
            add:
            - SYS_PTRACE
            - SYS_ADMIN
        volumeMounts:
        - mountPath: /host/proc
          name: proc
          readOnly: true
        - mountPath: /var/run/docker.sock
          name: run
        - mountPath: /host/sys
          name: sys
        - mountPath: /etc/netdata/go.d/coredns.conf
          name: config
          subPath: coredns
        - mountPath: /etc/netdata/go.d/k8s_kubelet.conf
          name: config
          subPath: kubelet
        - mountPath: /etc/netdata/go.d/k8s_kubeproxy.conf
          name: config
          subPath: kubeproxy
        - mountPath: /etc/netdata/netdata.conf
          name: config
          subPath: netdata
        - mountPath: /etc/netdata/stream.conf
          name: config
          subPath: stream
        - mountPath: /var/lib/netdata/registry/
          name: nodeuid
      dnsPolicy: ClusterFirstWithHostNet
      hostIPC: true
      hostNetwork: true
      hostPID: true
      initContainers:
      - args:
        - -c
        - |-
          apt-get update; apt-get install -y wget; mkdir -p /nodeuid/ ; TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token); URL="https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}/api/v1/nodes/${MY_NODE_NAME}"; HEADER="Authorization: Bearer ${TOKEN}";
          DATA=$(wget -q -T 5 --no-check-certificate --header "${HEADER}" -O - "${URL}"); [ -z "${DATA}" ] && exit 1;
          NETDATAUID=$(echo "${DATA}" | grep -m 1 uid | grep -o ":.*" | tr -d ": \","); [ -z "${NETDATAUID}" ] && exit 1;
          echo -n "${NETDATAUID}" > /nodeuid/netdata.public.unique.id; sleep 3;
        command:
        - /bin/sh
        env:
        - name: MY_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        image: ubuntu:latest
        imagePullPolicy: Always
        name: init-nodeuid
        volumeMounts:
        - mountPath: /nodeuid
          name: nodeuid
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: netdata
      serviceAccountName: netdata
      terminationGracePeriodSeconds: 30
      tolerations:
      - effect: NoSchedule
        operator: Exists
      volumes:
      - hostPath:
          path: /proc
          type: ""
        name: proc
      - hostPath:
          path: /var/run/docker.sock
          type: ""
        name: run
      - hostPath:
          path: /sys
          type: ""
        name: sys
      - configMap:
          defaultMode: 420
          name: netdata-conf-slave
        name: config
      - emptyDir: {}
        name: nodeuid
  templateGeneration: 11
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 5
    type: RollingUpdate
